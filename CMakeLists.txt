cmake_minimum_required(VERSION 3.23)
message("Configuring the IDP Master CMakeLists.txt")

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

if (NOT BUILD_TESTS)
    if(NOT DEFINED RPC_ENABLED)
        set(RPC_ENABLED false)
    endif()

    include(toolchain/gcc-arm-compiler.cmake)

    # Supply the compiler with system-wide processor definitions for the count of radios associated with a given CMAKE configuration.
    if (MULTI_TRANSCEIVER STREQUAL "DUAL_TRANSCEIVER")
        add_compile_definitions(SWC_RADIO_COUNT=2)
    else()
        add_compile_definitions(SWC_RADIO_COUNT=1)
    endif()

    if (TRANSCEIVER STREQUAL "SR1100")
        add_compile_definitions(SR1100=1)
        add_compile_definitions(SR1000=0)
    else()
        add_compile_definitions(SR1000=1)
        add_compile_definitions(SR1100=0)
    endif()

    project(IDP CXX C ASM)
    add_subdirectory(library)
    add_subdirectory(third-party)
    add_subdirectory(bsp)
    add_subdirectory(core)
    add_subdirectory(driver)
    if(IS_DIRECTORY "${CMAKE_CURRENT_LIST_DIR}/middleware")
        add_subdirectory(middleware)
    endif()
    if(IS_DIRECTORY "${CMAKE_CURRENT_LIST_DIR}/module")
        add_subdirectory(module)
    endif()
    add_subdirectory(app)
    if(IS_DIRECTORY "${CMAKE_CURRENT_LIST_DIR}/dev_tool")
        add_subdirectory(dev_tool)
    endif()
    if(IS_DIRECTORY "${CMAKE_CURRENT_LIST_DIR}/demo")
        add_subdirectory(demo)
    endif()
    add_subdirectory(backend)
    if(${MCU_DRIVER} STREQUAL STMG4XX)
        include(toolchain/gcc-arm-flags-stm32g4.cmake)
    elseif(${MCU_DRIVER} STREQUAL STMU5XX)
        include(toolchain/gcc-arm-flags-stm32u5.cmake)
    endif()
else ()
    project(unit_tests)
    include(toolchain/gcc-x86-compiler.cmake)
    enable_testing()
    set(RTOS_ENABLED false)
    add_subdirectory(tests)
endif()
